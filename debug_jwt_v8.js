// ============================================
// üîß DEBUG JWT IA COACH v8 - VERIFICA√á√ÉO
// ============================================

console.log('üîß DEBUG JWT - IA COACH v8');
console.log('üìÖ Data:', new Date().toLocaleString('pt-BR'));

// Teste com diferentes abordagens de autentica√ß√£o
async function debugJWT() {
  const supabaseUrl = 'https://zzugbgoylwbaojdnunuz.supabase.co';
  const anonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inp6dWdiZ295bHdiYW9qZG51bnV6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjkyNzM0MjIsImV4cCI6MjA0NDg0OTQyMn0.FvaBLFPrxqsYJBqhfhHUJIgzATvj3o50UgfIhMjZlYw';
  
  // 1. Teste b√°sico de conectividade
  console.log('\n1Ô∏è‚É£ TESTE CONECTIVIDADE B√ÅSICA');
  try {
    const pingResponse = await fetch(`${supabaseUrl}/functions/v1/ia-coach-chat`, {
      method: 'OPTIONS',
      headers: {
        'Access-Control-Request-Method': 'POST',
        'Access-Control-Request-Headers': 'authorization, content-type'
      }
    });
    console.log('üìä CORS Preflight:', pingResponse.status);
  } catch (error) {
    console.log('‚ùå Erro conectividade:', error.message);
  }

  // 2. Teste sem autentica√ß√£o (para ver erro espec√≠fico)
  console.log('\n2Ô∏è‚É£ TESTE SEM AUTENTICA√á√ÉO');
  try {
    const noAuthResponse = await fetch(`${supabaseUrl}/functions/v1/ia-coach-chat`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        messageContent: "teste",
        userProfile: { id: 'test', full_name: 'Test' },
        chatHistory: []
      })
    });
    console.log('üìä Status sem auth:', noAuthResponse.status);
    const noAuthText = await noAuthResponse.text();
    console.log('üìù Resposta:', noAuthText);
  } catch (error) {
    console.log('‚ùå Erro sem auth:', error.message);
  }

  // 3. Teste com ANON_KEY
  console.log('\n3Ô∏è‚É£ TESTE COM ANON_KEY');
  try {
    const authResponse = await fetch(`${supabaseUrl}/functions/v1/ia-coach-chat`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${anonKey}`,
        'apikey': anonKey
      },
      body: JSON.stringify({
        messageContent: "Oi, preciso de ajuda",
        userProfile: { id: 'test-123', full_name: 'Jo√£o' },
        chatHistory: []
      })
    });
    
    console.log('üìä Status com ANON_KEY:', authResponse.status);
    
    if (authResponse.ok) {
      const data = await authResponse.json();
      console.log('‚úÖ Sucesso! Resposta:', data);
      
      if (data.reply) {
        const questionCount = (data.reply.match(/\?/g) || []).length;
        console.log('üí¨ Resposta da IA:', data.reply);
        console.log('‚ùì N√∫mero de perguntas:', questionCount);
        console.log('üéØ Otimiza√ß√£o v8:', questionCount <= 1 ? '‚úÖ SUCESSO!' : '‚ö†Ô∏è Ainda verbosa');
      }
    } else {
      const errorText = await authResponse.text();
      console.log('‚ùå Erro com auth:', errorText);
    }
  } catch (error) {
    console.log('‚ùå Erro request:', error.message);
  }

  // 4. Verificar se √© problema de deployment
  console.log('\n4Ô∏è‚É£ INFORMA√á√ïES DE DEBUG');
  console.log('üîë ANON_KEY (primeiros 20 chars):', anonKey.substring(0, 20) + '...');
  console.log('üåê URL:', `${supabaseUrl}/functions/v1/ia-coach-chat`);
  console.log('üìã Headers usados: Content-Type, Authorization, apikey');
  
  console.log('\nüí° POSS√çVEIS CAUSAS:');
  console.log('1. Deploy n√£o foi aplicado corretamente');
  console.log('2. Fun√ß√£o est√° com erro interno');
  console.log('3. RLS policies bloqueando');
  console.log('4. Chave ANON_KEY expirou ou inv√°lida');
}

debugJWT();