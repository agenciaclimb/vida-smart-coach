name: supabase migrate prod cli

on:
  push:
    branches: [ main ]
    paths:
      - 'supabase/migrations/**'
      - '.github/workflows/supabase-migrate-prod-cli.yml'
  workflow_dispatch:

concurrency:
  group: supabase-migrate-prod
  cancel-in-progress: true

jobs:
  migrate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Pré-checagem de secrets (sem vazar conteúdo)
      - name: Preflight — secrets present?
        run: |
          [ -n "${{ secrets.SUPABASE_ACCESS_TOKEN }}" ] && echo "✓ SUPABASE_ACCESS_TOKEN OK" || (echo "✗ Faltando SUPABASE_ACCESS_TOKEN" && exit 1)
          [ -n "${{ secrets.SUPABASE_PROJECT_REF }}" ] && echo "✓ SUPABASE_PROJECT_REF OK" || (echo "✗ Faltando SUPABASE_PROJECT_REF" && exit 1)

      - name: Abort if no migrations
        id: check_migs
        run: |
          COUNT=$(ls -1 supabase/migrations 2>/dev/null | wc -l || true)
          echo "count=$COUNT" >> $GITHUB_OUTPUT
          if [ "$COUNT" -eq "0" ]; then
            echo "No migrations found. Skipping with neutral exit."
            exit 78
          fi

      - name: Setup Supabase CLI
        if: steps.check_migs.outputs.count != '0'
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Show CLI version
        if: steps.check_migs.outputs.count != '0'
        run: supabase --version

      - name: Link project
        if: steps.check_migs.outputs.count != '0'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}

      - name: List pending migrations
        if: steps.check_migs.outputs.count != '0'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: supabase migration list --status pending || true

      - name: Dry run push (debug)
        if: steps.check_migs.outputs.count != '0'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: supabase db push --dry-run --debug

      - name: Push migrations (retry 2x)
        if: steps.check_migs.outputs.count != '0'
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          set -e
          supabase db push --debug || {
            echo "First attempt failed. Retrying in 10s..."
            sleep 10
            supabase db push --debug
          }

      # Reparar divergência (drift) se o push ainda falhar
      - name: Repair drift with remote commit
        if: failure()
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          echo "Attempting remote commit to repair drift..."
          supabase db remote commit
          supabase db push --debug

