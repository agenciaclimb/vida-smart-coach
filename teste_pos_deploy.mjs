// üöÄ TESTE P√ìS-DEPLOY - Verificar se corre√ß√µes funcionaram
// Testar webhook ap√≥s deploy com estrutura de tabela corrigida

import { createClient } from '@supabase/supabase-js';

async function testePosDeploy() {
    console.log('üöÄ === TESTE P√ìS-DEPLOY WEBHOOK CORRIGIDO ===\n');
    
    const supabaseUrl = 'https://zzugbgoylwbaojdnunuz.supabase.co';
    const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inp6dWdiZ295bHdiYW9qZG51bnV6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQxODE5MTEsImV4cCI6MjA2OTc1NzkxMX0.8xe_8yAKTq4gWz0tzsYNgHRKvO5G7ZYK58Z2pkxxrmE';
    
    console.log('1Ô∏è‚É£ === VERIFICAR MENSAGENS ANTES DO TESTE ===');
    try {
        const supabase = createClient(supabaseUrl, supabaseAnonKey);
        
        const { data: mensagensAntes, error } = await supabase
            .from('whatsapp_messages')
            .select('message_content, received_at')
            .order('received_at', { ascending: false })
            .limit(5);
            
        if (error) {
            console.error('‚ùå Erro ao buscar mensagens:', error);
        } else {
            console.log(`üì± √öltimas 5 mensagens no banco:`);
            mensagensAntes.forEach((msg, index) => {
                const date = new Date(msg.received_at).toLocaleString();
                console.log(`${index + 1}. ${date} | "${msg.message_content}"`);
            });
        }
    } catch (error) {
        console.error('üí• Erro ao verificar mensagens:', error.message);
    }
    
    console.log('\n2Ô∏è‚É£ === TESTE WEBHOOK COM PAYLOAD COMPLETO ===');
    try {
        const testTime = new Date().toLocaleTimeString();
        const testMessage = `Preciso de ajuda para emagrecer - teste ${testTime}`;
        
        const webhookPayload = {
            event: 'messages.upsert',
            data: {
                key: {
                    remoteJid: '5516981459950@s.whatsapp.net',
                    id: 'test-final-' + Date.now(),
                    fromMe: false
                },
                message: {
                    conversation: testMessage
                }
            }
        };
        
        console.log(`üß™ Enviando mensagem teste: "${testMessage}"`);
        console.log('üì¶ Payload completo:', JSON.stringify(webhookPayload, null, 2));
        
        const webhookResponse = await fetch(`${supabaseUrl}/functions/v1/evolution-webhook`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${supabaseAnonKey}`
            },
            body: JSON.stringify(webhookPayload)
        });
        
        console.log('\nüì• === RESULTADO WEBHOOK ===');
        console.log('Status:', webhookResponse.status);
        console.log('Status Text:', webhookResponse.statusText);
        
        if (webhookResponse.ok) {
            const result = await webhookResponse.json();
            console.log('‚úÖ Resposta:', JSON.stringify(result, null, 2));
            
            if (result.status === 'success') {
                console.log('üéâ SUCESSO TOTAL! IA Coach respondeu');
                console.log('üìù Resposta da IA:', result.iaResponse);
            } else if (result.status === 'success_with_fallback') {
                console.log('‚ö†Ô∏è SUCESSO PARCIAL! Usou fallback');
                console.log('üí° IA Coach ainda com problema, mas webhook funcionou');
            } else {
                console.log('‚ùì Status inesperado:', result.status);
            }
        } else {
            const errorText = await webhookResponse.text();
            console.log('‚ùå Erro:', errorText);
            
            if (errorText.includes('column') && errorText.includes('does not exist')) {
                console.log('üîç AINDA problema de estrutura da tabela!');
            } else if (errorText.includes('Evolution API')) {
                console.log('üîç Problema com Evolution API variables');
            } else if (errorText.includes('JWT') || errorText.includes('401')) {
                console.log('üîç Problema com autentica√ß√£o');
            }
        }
    } catch (error) {
        console.error('üí• Erro no teste webhook:', error.message);
    }
    
    console.log('\n3Ô∏è‚É£ === VERIFICAR SE MENSAGEM FOI INSERIDA ===');
    try {
        const supabase = createClient(supabaseUrl, supabaseAnonKey);
        
        // Aguardar um pouco para garantir que foi inserida
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const { data: mensagensDepois, error } = await supabase
            .from('whatsapp_messages')
            .select('message_content, received_at')
            .order('received_at', { ascending: false })
            .limit(3);
            
        if (error) {
            console.error('‚ùå Erro ao verificar inser√ß√£o:', error);
        } else {
            console.log('üì± √öltimas 3 mensagens ap√≥s teste:');
            mensagensDepois.forEach((msg, index) => {
                const date = new Date(msg.received_at).toLocaleString();
                console.log(`${index + 1}. ${date} | "${msg.message_content}"`);
            });
            
            // Verificar se nossa mensagem foi inserida
            const mensagemTeste = mensagensDepois.find(m => 
                m.message_content.includes('Preciso de ajuda para emagrecer - teste')
            );
            
            if (mensagemTeste) {
                console.log('‚úÖ MENSAGEM INSERIDA COM SUCESSO!');
            } else {
                console.log('‚ùå Mensagem de teste n√£o foi inserida');
            }
        }
    } catch (error) {
        console.error('üí• Erro ao verificar inser√ß√£o:', error.message);
    }
    
    console.log('\n4Ô∏è‚É£ === TESTE IA COACH ISOLADO ===');
    try {
        console.log('üß† Testando IA Coach diretamente...');
        
        const iaResponse = await fetch(`${supabaseUrl}/functions/v1/ia-coach-chat`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${supabaseAnonKey}`
            },
            body: JSON.stringify({
                message: 'Preciso de ajuda para emagrecer',
                phone: '5516981459950',
                history: '',
                channel: 'whatsapp'
            })
        });
        
        console.log('üß† IA Status:', iaResponse.status);
        
        if (iaResponse.ok) {
            const iaResult = await iaResponse.json();
            console.log('‚úÖ IA funcionando:', iaResult.reply || iaResult.response || 'Sem resposta');
        } else {
            const errorText = await iaResponse.text();
            console.log('‚ùå IA Error:', errorText);
        }
    } catch (error) {
        console.error('üí• Erro teste IA:', error.message);
    }
    
    console.log('\nüéØ === DIAGN√ìSTICO FINAL ===');
    console.log('CHECKLIST SUCESSO:');
    console.log('‚ñ° Webhook responde (200 OK)');
    console.log('‚ñ° Mensagem inserida na tabela');
    console.log('‚ñ° IA Coach funciona');
    console.log('‚ñ° Evolution API configurada');
    console.log('‚ñ° Status "success" (n√£o fallback)');
    
    console.log('\nüí° === PR√ìXIMOS PASSOS ===');
    console.log('Se tudo funcionou: Testar no WhatsApp real');
    console.log('Se ainda falha: Verificar logs Supabase em tempo real');
    console.log('Se usa fallback: Configurar vari√°veis Evolution no Supabase');
}

testePosDeploy().catch(console.error);