// fix_water_intake_direct.js
// üîß Aplica corre√ß√£o direta do water_intake usando padr√£o dos scripts existentes

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://zzugbgoylwbaojdnunuz.supabase.co';

// Usando mesmo padr√£o dos scripts que funcionam no projeto
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function fixWaterIntakeConstraint() {
    console.log('üîß Iniciando corre√ß√£o do water_intake constraint...\n');
    
    try {
        // Primeira verifica√ß√£o: qual √© o problema atual?
        console.log('üîç Verificando estado atual da tabela...');
        
        const { data: tableInfo, error: infoError } = await supabase
            .from('daily_checkins')
            .select('*')
            .limit(1);
        
        if (infoError) {
            console.log('‚ÑπÔ∏è  Info query error (esperado):', infoError.message);
        }
        
        // Teste de insert para confirmar o problema
        console.log('üß™ Confirmando o problema com teste de insert...');
        
        const testPayload = {
            user_id: '00000000-0000-0000-0000-000000000999',
            date: '2025-09-15',
            mood: 4,
            mood_score: 4,
            energy_level: 4,
            sleep_hours: 8
            // water_intake omitido - deve causar erro
        };
        
        const { data: testData, error: testError } = await supabase
            .from('daily_checkins')
            .insert(testPayload)
            .select();
        
        if (testError && testError.message.includes('water_intake')) {
            console.log('‚úÖ Problema confirmado:', testError.message);
            console.log('üìã Aplicando corre√ß√µes...\n');
        } else {
            console.log('ü§î Problema n√£o encontrado. Sistema pode j√° estar corrigido.');
            if (!testError) {
                console.log('üíß water_intake no resultado:', testData[0]?.water_intake);
                // Limpa teste
                await supabase
                    .from('daily_checkins')
                    .delete()
                    .eq('user_id', '00000000-0000-0000-0000-000000000999');
            }
            return { alreadyFixed: true };
        }
        
        // Estrat√©gia: Vamos usar RPC para executar o SQL diretamente
        console.log('üî® Executando corre√ß√µes SQL...');
        
        // Lista de comandos SQL para corre√ß√£o
        const sqlCommands = [
            // 1. Adicionar valor default
            `ALTER TABLE public.daily_checkins ALTER COLUMN water_intake SET DEFAULT 0;`,
            
            // 2. Corrigir registros existentes com NULL
            `UPDATE public.daily_checkins SET water_intake = 0 WHERE water_intake IS NULL;`,
            
            // 3. Garantir que constraint NOT NULL seja mantida (se n√£o existir)
            `ALTER TABLE public.daily_checkins ALTER COLUMN water_intake SET NOT NULL;`
        ];
        
        // Usar fun√ß√£o RPC se existir, sen√£o usar Supabase SQL editor approach
        let successCount = 0;
        
        for (let i = 0; i < sqlCommands.length; i++) {
            const cmd = sqlCommands[i];
            console.log(`üìù Executando comando ${i + 1}/3...`);
            console.log(`   ${cmd.substring(0, 60)}...`);
            
            try {
                // Tenta usar RPC exec_sql se existir
                const { data, error } = await supabase.rpc('exec_sql', { 
                    query: cmd 
                });
                
                if (error) {
                    console.log(`‚ö†Ô∏è  RPC error no comando ${i + 1}:`, error.message);
                    
                    // Se erro for "function not found", isso √© esperado
                    if (error.message.includes('function') && error.message.includes('not exist')) {
                        console.log('‚ÑπÔ∏è  RPC function n√£o dispon√≠vel. Isso √© normal.');
                        console.log('üìã Este comando precisa ser executado manualmente no Supabase SQL Editor:');
                        console.log(`   ${cmd}`);
                    } else if (error.message.includes('already exists') || 
                               error.message.includes('does not exist')) {
                        console.log(`‚úÖ Comando ${i + 1} j√° pode estar aplicado`);
                        successCount++;
                    } else {
                        throw error;
                    }
                } else {
                    console.log(`‚úÖ Comando ${i + 1} executado com sucesso`);
                    successCount++;
                }
            } catch (err) {
                console.error(`‚ùå Erro no comando ${i + 1}:`, err);
                throw err;
            }
        }
        
        console.log(`\nüìä Comandos processados: ${successCount}/${sqlCommands.length}`);
        
        // Teste final
        console.log('\nüß™ Teste final: inserindo registro sem water_intake...');
        
        const finalTestPayload = {
            user_id: '00000000-0000-0000-0000-000000000998',
            date: '2025-09-15',
            mood: 5,
            mood_score: 5,
            energy_level: 5,
            sleep_hours: 9
            // water_intake omitido - agora deve funcionar
        };
        
        const { data: finalData, error: finalError } = await supabase
            .from('daily_checkins')
            .insert(finalTestPayload)
            .select();
        
        if (finalError) {
            console.error('‚ùå Teste final falhou:', finalError);
            
            if (finalError.message.includes('water_intake')) {
                console.error('üö® CORRE√á√ÉO N√ÉO FOI APLICADA - ainda h√° erro do water_intake');
                console.error('üìã A√á√ÉO MANUAL NECESS√ÅRIA no Supabase SQL Editor:');
                sqlCommands.forEach((cmd, i) => {
                    console.error(`${i + 1}. ${cmd}`);
                });
                return { needsManualAction: true, commands: sqlCommands };
            }
            
            throw finalError;
        }
        
        console.log('üéâ TESTE FINAL PASSOU!');
        console.log('üíß water_intake inserido automaticamente:', finalData[0].water_intake);
        
        // Limpa teste final
        await supabase
            .from('daily_checkins')
            .delete()
            .eq('user_id', '00000000-0000-0000-0000-000000000998');
        
        console.log('\n‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!');
        console.log('üéØ water_intake agora tem valor padr√£o 0');
        console.log('üîí Constraint NOT NULL mantida');
        console.log('üì± Check-ins sem water_intake devem funcionar');
        
        return { 
            success: true, 
            defaultValue: finalData[0].water_intake,
            commandsExecuted: successCount 
        };
        
    } catch (error) {
        console.error('\nüí• ERRO na corre√ß√£o:', error);
        return { error, needsManualAction: true };
    }
}

// Executa
fixWaterIntakeConstraint()
    .then(result => {
        console.log('\nüìã RESULTADO DA CORRE√á√ÉO:');
        console.log(JSON.stringify(result, null, 2));
        
        if (result.needsManualAction) {
            console.log('\n‚ö†Ô∏è  A√á√ÉO MANUAL necess√°ria no Supabase Dashboard');
            process.exit(1);
        } else if (result.success || result.alreadyFixed) {
            console.log('\nüéâ SISTEMA CORRIGIDO E FUNCIONANDO!');
            process.exit(0);
        } else {
            console.log('\n‚ùå Corre√ß√£o n√£o foi completada');
            process.exit(1);
        }
    })
    .catch(error => {
        console.error('üí• Erro fatal:', error);
        process.exit(1);
    });